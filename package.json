{
  "name": "slamscan",
  "description": "Use lambda to scan s3 files on upload. S3 LAMbda clamSCAN",
  "author": {
    "name": "Randy Tarampi",
    "email": "rt@randytarampi.ca",
    "url": "https://www.randytarampi.ca"
  },
  "license": "MIT",
  "version": "3.0.1",
  "private": true,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/randytarampi/slamscan.git"
  },
  "dependencies": {
    "@randy.tarampi/lambda-logger": "^6.0.0",
    "@randy.tarampi/serverless": "^6.0.0",
    "clamscan": "^1.2.0",
    "md5": "^2.2.1",
    "temp": "^0.9.1",
    "snyk": "^1.290.1"
  },
  "devDependencies": {
    "@babel/cli": "^7.7.7",
    "@babel/core": "^7.7.7",
    "@babel/plugin-proposal-class-properties": "^7.7.4",
    "@babel/plugin-proposal-object-rest-spread": "^7.7.7",
    "@babel/plugin-transform-property-literals": "^7.7.4",
    "@babel/polyfill": "^7.7.0",
    "@babel/preset-env": "^7.7.7",
    "@babel/register": "^7.7.7",
    "@semantic-release/changelog": "^5.0.0",
    "@semantic-release/git": "^9.0.0",
    "babel-eslint": "^10.0.3",
    "babel-loader": "^8.0.6",
    "babel-plugin-istanbul": "^6.0.0",
    "babel-plugin-lodash": "^3.3.4",
    "babel-plugin-minify-replace": "^0.5.0",
    "coveralls": "^3.0.9",
    "del": "^5.1.0",
    "eslint-plugin-import": "^2.19.1",
    "gulp": "^4.0.2",
    "gulp-eslint": "^6.0.0",
    "gulp-if": "^3.0.0",
    "gulp-mocha": "^7.0.2",
    "mocha": "^7.0.0",
    "nyc": "^15.0.0",
    "semantic-release": "^17.0.0",
    "serverless": "^1.60.5",
    "serverless-mocha-plugin": "^1.11.0",
    "serverless-webpack": "^5.3.1",
    "sinon": "^9.0.2",
    "vinyl-paths": "^3.0.1",
    "webpack": "^4.41.5",
    "webpack-bundle-analyzer": "^3.6.0",
    "webpack-cli": "^3.3.10",
    "webpack-node-externals": "^1.7.2"
  },
  "bugs": {
    "url": "https://github.com/randytarampi/slamscan/issues",
    "email": "bugs@randytarampi.ca"
  },
  "scripts": {
    "postinstall": "./bin/build.sh",
    "clean": "gulp -LLLL --color clean",
    "cover:gulp": "NODE_ENV=test SLAMSCAN_CLAMSCAN_BINARY_PATH=${SLAMSCAN_CLAMSCAN_BINARY_PATH:=/usr/local/bin/clamscan} SLAMSCAN_FRESHCLAM_BINARY_PATH=${SLAMSCAN_FRESHCLAM_BINARY_PATH:=/usr/local/bin/freshclam} SLAMSCAN_FRESHCLAM_CONFIG_PATH=${SLAMSCAN_FRESHCLAM_CONFIG_PATH:=$PWD/build/etc/freshclam.conf} nyc --temp-dir .nyc_output-gulp gulp -LLLL --color test",
    "cover:sls": "NODE_ENV=test SLAMSCAN_CLAMSCAN_BINARY_PATH=${SLAMSCAN_CLAMSCAN_BINARY_PATH:=/usr/local/bin/clamscan} SLAMSCAN_FRESHCLAM_BINARY_PATH=${SLAMSCAN_FRESHCLAM_BINARY_PATH:=/usr/local/bin/freshclam} SLAMSCAN_FRESHCLAM_CONFIG_PATH=${SLAMSCAN_FRESHCLAM_CONFIG_PATH:=$PWD/build/etc/freshclam.conf} nyc --temp-dir .nyc_output-sls sls invoke test --path test/sls",
    "cover:collect": "mkdir -p .nyc_output/ && cp -r .nyc_output-gulp/* .nyc_output && cp -r .nyc_output-sls/* .nyc_output && nyc report --reporter=lcov",
    "cover:actual": "rm -rf coverage/ .nyc_output/; npm run cover:gulp && npm run cover:sls",
    "precover": "npm run pretest",
    "cover": "npm run cover:actual; npm run cover:collect",
    "coveralls": "cat coverage/lcov.info | coveralls",
    "pretest": "gulp -LLLL --color lint",
    "test": "npm run test:actual",
    "test:actual": "npm run test:actual:gulp && npm run test:actual:sls",
    "test:actual:gulp": "NODE_ENV=test SLAMSCAN_CLAMSCAN_BINARY_PATH=${SLAMSCAN_CLAMSCAN_BINARY_PATH:=/usr/local/bin/clamscan} SLAMSCAN_FRESHCLAM_BINARY_PATH=${SLAMSCAN_FRESHCLAM_BINARY_PATH:=/usr/local/bin/freshclam} SLAMSCAN_FRESHCLAM_CONFIG_PATH=${SLAMSCAN_FRESHCLAM_CONFIG_PATH:=$PWD/build/etc/freshclam.conf} gulp -LLLL --color test",
    "test:actual:sls": "NODE_ENV=test SLAMSCAN_CLAMSCAN_BINARY_PATH=${SLAMSCAN_CLAMSCAN_BINARY_PATH:=/usr/local/bin/clamscan} SLAMSCAN_FRESHCLAM_BINARY_PATH=${SLAMSCAN_FRESHCLAM_BINARY_PATH:=/usr/local/bin/freshclam} SLAMSCAN_FRESHCLAM_CONFIG_PATH=${SLAMSCAN_FRESHCLAM_CONFIG_PATH:=$PWD/build/etc/freshclam.conf} sls invoke test --path test/sls --compilers js:./babel.register.js",
    "deploy": "NODE_ENV=production sls deploy --stage deploy",
    "seed": "sls invoke --stage deploy --function updateDefinitions",
    "remove": "sls remove --stage deploy",
    "snyk-protect": "snyk protect",
    "prepare": "npm run snyk-protect"
  },
  "engines": {
    "node": ">=10"
  },
  "greenkeeper": {
    "commitMessages": {
      "initialBadge": "docs(greenkeeper): Add Greenkeeper badge.",
      "initialDependencies": "chore(greenkeeper): Update dependencies.",
      "initialBranches": "chore(greenkeeper): Whitelist greenkeeper branches.",
      "dependencyUpdate": "chore(greenkeeper): ${dependency}@${version}.",
      "devDependencyUpdate": "chore(greenkeeper): ${dependency}@${version}.",
      "dependencyPin": "fix(greenkeeper): Pin ${dependency}@${oldVersion}.",
      "devDependencyPin": "fix(greenkeeper): Pin ${dependency}@${oldVersion}."
    },
    "prTitles": {
      "initialPR": "chore(greenkeeper): Update dependencies and enable Greenkeeper",
      "initialPrBadge": "docs(greenkeeper): Add Greenkeeper badge and enable Greenkeeper",
      "initialPrBadgeOnly": "docs(greenkeeper): Add Greenkeeper badge",
      "initialSubgroupPR": "chore(greenkeeper): Update dependencies for ${group}",
      "basicPR": "chore(greenkeeper): Update ${dependency}",
      "groupPR": "chore(greenkeeper): Update ${dependency} for ${group}"
    }
  },
  "snyk": true
}
